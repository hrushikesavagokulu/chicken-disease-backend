<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>üêî Chicken Disease Classifier</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(to right, #f07676, #c73939, #f07676, #a13f3f, #dc9744, #efd96c);
      background-size: 400% 400%;
      animation: gradientShift 15s ease infinite;
      font-family: 'Segoe UI', sans-serif;
      color: #fff;
    }

    @keyframes gradientShift {
      0% {background-position: 0% 50%;}
      50% {background-position: 100% 50%;}
      100% {background-position: 0% 50%;}
    }

    h1 {
      font-weight: 700;
      color: #ffe08a;
      text-shadow: 1px 1px 3px #000;
    }

    .upload-box {
      background-color: rgba(0, 0, 0, 0.6);
      border: 2px dashed #ffdd99;
      border-radius: 15px;
      padding: 30px;
      transition: all 0.3s ease;
    }

    .upload-box:hover {
      border-color: #fff;
      background-color: rgba(255, 255, 255, 0.05);
      transform: scale(1.02);
    }

    .btn-primary {
      background-color: #ffd966;
      color: #000;
      border: none;
    }

    .btn-primary:hover {
      background-color: #fff3b0;
      color: #000;
    }

    .prediction-card {
      background-color: rgba(0, 0, 0, 0.7);
      border: none;
      border-radius: 15px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
      animation: fadeIn 1s ease-in-out;
      color: #fff;
    }

    @keyframes fadeIn {
      from {opacity: 0; transform: translateY(20px);}
      to {opacity: 1; transform: translateY(0);}
    }

    .alert-info {
      background-color: rgba(255, 255, 255, 0.1);
      border-left: 5px solid #ffe08a;
      color: #ffe;
    }

    .form-control {
      background-color: #333;
      color: #fff;
      border: 1px solid #777;
    }

    .form-control::file-selector-button {
      background-color: #ffe08a;
      color: #000;
      border: none;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <h1 class="text-center mb-5">üêî Chicken Disease Classifier</h1>

    <div class="row justify-content-center">
      <div class="col-md-6">
        <form action="/predict" method="POST" enctype="multipart/form-data" class="upload-box text-center">
          <h5 class="mb-3 text-light">Upload a chicken image</h5>
          <input type="file" name="file" class="form-control mb-3" required>
          <button type="submit" class="btn btn-primary px-4">Predict</button>
        </form>
      </div>
    </div>

    {% if prediction %}
    <div class="row justify-content-center mt-5">
      <div class="col-md-8">
        <div class="card prediction-card p-4 text-center">
          <h3 class="mb-3 text-warning">üß† Prediction: {{ prediction }}</h3>
          <img src="{{ image_path }}" class="img-fluid rounded shadow mb-4" style="max-width: 300px;">

          <div class="alert alert-info text-start">
            <h5 class="mb-2">üíä Recommended Medicine:</h5>
            <p>{{ medicine }}</p>
            <h5 class="mb-2">üõ°Ô∏è Precautions:</h5>
            <p>{{ precaution }}</p>
          </div>
        </div>
      </div>
    </div>
    {% endif %}

  </div>
</body>
</html>



============================================



from flask import Flask, render_template, request
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import os

app = Flask(__name__)
model = load_model('chicken_disease_model.h5')

# Update to your class names
class_names = ['Coccidiosis', 'Healthy', 'Newcastle Disease', 'Salmonella']

UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return "No file uploaded", 400

    file = request.files['file']
    if file.filename == '':
        return "No selected file", 400

    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(filepath)

    img = image.load_img(filepath, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)[0]
    predicted_index = np.argmax(prediction)
    predicted_class = class_names[predicted_index]
    confidence = prediction[predicted_index]

    disease_info = {
        "Coccidiosis": {
            "medicine": "Amprolium or Toltrazuril",
            "precaution": "Keep litter dry, sanitize equipment, vaccinate chicks."
        },
        "Healthy": {
            "medicine": "No medication needed",
            "precaution": "Continue balanced diet and clean environment."
        },
        "Newcastle Disease": {
            "medicine": "No cure; supportive therapy like multivitamins",
            "precaution": "Vaccinate healthy birds, isolate infected birds, disinfect housing."
        },
        "Salmonella": {
            "medicine": "Antibiotics like Enrofloxacin or Streptomycin",
            "precaution": "Keep feed and water clean, cull carriers, disinfect thoroughly."
        }
    }

    medicine = disease_info[predicted_class]["medicine"]
    precaution = disease_info[predicted_class]["precaution"]

    return render_template(
        'index.html',
        prediction=f"{predicted_class} ({confidence:.2%})",
        medicine=medicine,
        precaution=precaution,
        image_path=filepath,
        labels=class_names,
        confidences=[float(c) for c in prediction]
    )


if __name__ == '__main__':
    app.run(debug=True)
